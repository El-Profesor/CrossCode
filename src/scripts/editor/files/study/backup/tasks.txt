function bs(arr, searchValue, low, high) {
    if (low >= high) return -1

    let mid = low + Math.floor((high - low) / 2)

    if (arr[mid] === searchValue) {
        return mid
    }

    if (arr[mid] > searchValue) {
        return bs(arr, searchValue, low, mid - 1)
    }

    return bs(arr, searchValue, mid + 1, high)
}

let arr = [2, 5, 7, 8, 13, 18]
let i = bs(arr, 8, 0, arr.length - 1)

function fibonacci(N) {
    let memo = [0, 1]

    for (let i = 2; i < N; i = i + 1) {
        memo[i] = memo[i] + memo[i - 1]
    }

    return memo[N]
}

let n = 7
let y = fibonacci(n)

// Return a new list with item inserted at the right position
function insert(list, item) {
    let n = list.length
    let newList = []

    let j = 0
    for (let i = 0; i < n; i = i + 1) {
        if (item >= list[i]) {
            j = i
        }
    }

    for (let i = 0; i < j; i = i + 1) {
        newList[i] = list[i]
    }

    newList.push(item)

    for (let i = j; i < n + 1; i = i + 1) {
        newList[i + 1] = list[i]
    }

    return newList
}

let l = [1, 3, 5, 7, 9]
let k = 5
let newList = insert(l, k)

function merge(left, right) {
    let i = 0
    let j = 0
    let results = []

    for (let k = 0; k < left.length + right.length; k = k + 1) {
        if (i > left.length - 1) {
            results.push(right[j])
            j = j + 1
        } else if (j > right.length - 1 || left[i] < right[j]) {
            results.push(left[i])
            i = i + 1
        } else {
            results.push(right[j])
            j = j + 1
        }
    }

    return results
}

function mergeSort(array) {
    // Base case or terminating case
    if (array.length < 2) {
        return array
    }

    let half = array.length / 2
    let left = []
    let right = []

    for (let i = 0; i < array.length / 2; i = i + 1) {
        if (i < half) {
            left.push(array[i])
        } else {
            right.push(array[i])
        }
    }

    return merge(mergeSort(left), mergeSort(right))
}

let unsorted = [4, 1, 7, 0, 3, 9, 1, 6, 3]
let sorted = mergeSort(unsorted)
console.log(sorted)

function concat(a, b) {
    let c = []
    for (let i = 0; i < a.length; i = i + 1) c.push(a[i])
    for (let i = 0; i < b.length; i = i + 1) c.push(b[i])
    return c
}

function qs(array) {
    if (array.length <= 1) {
        return array
    }

    let pivot = array[0]

    let left = []
    let right = []

    for (let i = 1; i < array.length - 1; i = i + 1) {
        if (array[i] < pivot) {
            left.push(array[i])
        } else {
            right.push(array[i])
        }
    }

    let l = qs(left)
    let r = qs(right)

    l.push(pivot)

    return concat(l, r)
}

let unsorted = [4, 1, 7, 0, 3, 9, 1, 6, 3]
let sorted = qs(unsorted)

let list = [1, 2, 3, 4, 5, 6, 7, 8, 9]
let n = list.length

// Reverse a list in place
for (let i = 0; i < n; i = i + 1) {
    let temp = list[i]
    list[i] = list[n - 1 - i]
    list[n - 1 - i] = temp
}
